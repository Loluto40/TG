# core.py
import os
import asyncio
import time
import json
import sys
from telethon import TelegramClient, functions, types, errors
from telethon.tl.types import ChannelParticipantAdmin, ChannelParticipantCreator
from config import API_ID, API_HASH, SESSION_FOLDER, GROUPS_FILE, PROXY_FILE, TIMING_FILE

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è debugger
os.environ['PYDEVD_DISABLE_FILE_VALIDATION'] = '1'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
last_post_ids = {}
LAST_POSTS_FILE = 'last_posts.json'

def clear_sqlite_locks(session_path):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
    for ext in ['-wal', '-shm', '-journal']:
        lock_file = f"{session_path}{ext}"
        if os.path.exists(lock_file):
            try:
                os.remove(lock_file)
            except:
                pass

def read_groups():
    """–ß—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    if not os.path.exists(GROUPS_FILE):
        raise ValueError(f"–§–∞–π–ª {GROUPS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    with open(GROUPS_FILE, 'r', encoding='utf-8') as f:
        groups = [line.strip() for line in f if line.strip()]
        if not groups:
            raise ValueError("–§–∞–π–ª –≥—Ä—É–ø–ø –ø—É—Å—Ç")
        return groups

def save_last_posts():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        with open(LAST_POSTS_FILE, 'w') as f:
            json.dump(last_post_ids, f)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è last_posts: {e}")

def load_last_posts():
    """–ó–∞–≥—Ä—É–∑–∫–∞ ID —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global last_post_ids
    if os.path.exists(LAST_POSTS_FILE):
        try:
            with open(LAST_POSTS_FILE, 'r') as f:
                last_post_ids = json.load(f)
        except:
            last_post_ids = {}

async def check_admin_rights(client, group_entity):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        participant = await client(functions.channels.GetParticipantRequest(
            channel=await client.get_input_entity(group_entity),
            participant=await client.get_me()
        ))
        return isinstance(participant.participant, 
                        (ChannelParticipantAdmin, ChannelParticipantCreator))
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
        return False

async def repost_last_post(client, channel_entity, groups):
    """–†–µ–ø–æ—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    global last_post_ids
    last_post_ids.clear()

    try:
        message = await client.get_messages(channel_entity, limit=1)
        if not message:
            print("‚ùå –í –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
            return False

        print(f"üîÑ –†–µ–ø–æ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ID {message[0].id}...")
        for group_str in groups:
            try:
                group = await client.get_input_entity(group_str)
                result = await client.forward_messages(
                    entity=group,
                    messages=message,
                    drop_author=True,
                    silent=True
                )
                
                if result:
                    last_post_ids[group_str] = result[0].id
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤ {group_str}")
                await asyncio.sleep(2)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ {group_str}: {e}")

        save_last_posts()
        return True
    except Exception as e:
        print(f"üî• –û—à–∏–±–∫–∞ —Ä–µ–ø–æ—Å—Ç–∞: {e}")
        return False

async def process_group_action(client, action, group_str, msg_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    try:
        group = await client.get_input_entity(group_str)
        
        if action == "pin":
            await client.pin_message(group, msg_id)
            print(f"üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ {group_str}")
        elif action == "unpin":
            await client.unpin_message(group, msg_id)
            print(f"üìé –û—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ {group_str}")
        elif action == "delete":
            await client.delete_messages(group, [msg_id])
            print(f"üóë –£–¥–∞–ª–µ–Ω–æ –≤ {group_str}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {action} –≤ {group_str}: {e}")

async def main_loop(channel_username, command):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        load_last_posts()
        
        if not os.path.exists(SESSION_FOLDER):
            os.makedirs(SESSION_FOLDER)

        session_files = [f for f in os.listdir(SESSION_FOLDER) 
                      if f.endswith('.session') and not f.startswith('.')]
        if not session_files:
            print("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π")
            return

        groups = read_groups()
        
        for session_file in session_files:
            session_path = os.path.join(SESSION_FOLDER, session_file)
            clear_sqlite_locks(session_path)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å–µ—Å—Å–∏—é –≤–º–µ—Å—Ç–æ –∫–∞—Å—Ç–æ–º–Ω–æ–π
            client = TelegramClient(
                session=session_path,
                api_id=API_ID,
                api_hash=API_HASH,
                system_version="4.16.30-vxCustom",
                request_retries=3,
                retry_delay=1
            )
            
            try:
                await client.start()
                print(f"\nüü¢ –°–µ—Å—Å–∏—è {session_file} –∑–∞–ø—É—â–µ–Ω–∞")
                entity = await client.get_entity(channel_username)

                if command == "/repost_all":
                    await asyncio.sleep(read_timing() * 60)
                    await repost_last_post(client, entity, groups)
                
                elif command in ["/pin_last", "/unpin_last", "/delete_last"]:
                    action = {
                        "/pin_last": "pin",
                        "/unpin_last": "unpin",
                        "/delete_last": "delete"
                    }[command]

                    for group_str, msg_id in last_post_ids.items():
                        await process_group_action(client, action, group_str, msg_id)
                    
                    if command == "/delete_last":
                        last_post_ids.clear()
                        if os.path.exists(LAST_POSTS_FILE):
                            os.remove(LAST_POSTS_FILE)

            except Exception as e:
                print(f"üî• –û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ {session_file}: {e}")
            finally:
                await client.disconnect()
                print(f"üîµ –°–µ—Å—Å–∏—è {session_file} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python core.py @channel_username /command")
        sys.exit(1)

    asyncio.run(main_loop(sys.argv[1], sys.argv[2]))